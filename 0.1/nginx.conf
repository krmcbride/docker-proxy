# nginx container configuration based on recommendations and information from:
#
# http://wiki.nginx.org/Configuration
# http://nginx.org/en/docs/
# https://github.com/h5bp/server-configs-nginx
# https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching
# https://github.com/jwilder/nginx-proxy/blob/master/nginx.tmpl

# Run as a less privileged user for security reasons.
user nginx;

# Run in the foreground
daemon off;

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

events {
  # When you need > 8000 * cpu_cores connections, you start optimizing your OS,
  # and this is probably the point at which you hire people who are smarter than
  # you, as this is *a lot* of requests.
  worker_connections 8000;
}

# Default error log file
# (this is only used when you don't override error_log on a server{} level)
error_log  /proc/self/fd/2;     # The current process's stderr
pid        /var/run/nginx.pid;

http {

  # Hide nginx version information.
  server_tokens off;

  # Define the MIME types for files.
  include       mime.types;
  default_type  application/octet-stream;

  # Update charset_types due to updated mime.types
  charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

  # Format to use in log files
  log_format  main  '$host $remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  # Default log file
  # (this is only used when you don't override access_log on a server{} level)
  access_log /proc/self/fd/1 main;   # The current process's stdout

  # How long to allow each connection to stay idle; longer values are better
  # for each individual client, particularly for SSL, but means that worker
  # connections are tied up longer. (Default: 65)
  keepalive_timeout 20;

  # Speed up file transfers by using sendfile() to copy directly
  # between descriptors rather than using read()/write().
  sendfile        on;

  # Tell Nginx not to send out partial frames; this increases throughput
  # since TCP frames are filled up before being sent out. (adds TCP_CORK)
  tcp_nopush      on;


  # Compression

  # Enable Gzip compressed.
  gzip on;

  # Compression level (1-9).
  # 5 is a perfect compromise between size and cpu usage, offering about
  # 75% reduction for most ascii files (almost identical to level 9).
  gzip_comp_level    5;

  # Don't compress anything that's already small and unlikely to shrink much
  # if at all (the default is 20 bytes, which is bad as that usually leads to
  # larger files after gzipping).
  gzip_min_length    256;

  # Compress data even for clients that are connecting to us via proxies,
  # identified by the "Via" header (required for CloudFront).
  gzip_proxied       any;

  # Tell proxies to cache both the gzipped and regular version of a resource
  # whenever the client's Accept-Encoding capabilities header varies;
  # Avoids the issue where a non-gzip capable client (which is extremely rare
  # today) would display gibberish if their proxy gave them the gzipped version.
  gzip_vary          on;

  # Compress all output labeled with one of the following MIME-types.
  gzip_types
    application/atom+xml
    application/javascript
    application/json
    application/ld+json
    application/manifest+json
    application/rdf+xml
    application/rss+xml
    application/schema+json
    application/vnd.geo+json
    application/vnd.ms-fontobject
    application/x-font-ttf
    application/x-javascript
    application/x-web-app-manifest+json
    application/xhtml+xml
    application/xml
    font/eot
    font/opentype
    image/bmp
    image/svg+xml
    image/vnd.microsoft.icon
    image/x-icon
    text/cache-manifest
    text/css
    text/javascript
    text/plain
    text/vcard
    text/vnd.rim.location.xloc
    text/vtt
    text/x-component
    text/x-cross-domain-policy
    text/xml;
  # text/html is always compressed by HttpGzipModule

  # This should be turned on if you are going to have pre-compressed copies (.gz) of
  # static files available. If not it should be left off as it will cause extra I/O
  # for the check. It is best if you enable this in a location{} block for
  # a specific directory, or on an individual server{} level.
  # gzip_static on;


  # Variables

  # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
  # scheme used to connect to this server
  map $http_x_forwarded_proto $proxy_x_forwarded_proto {
    default $http_x_forwarded_proto;
    ''      $scheme;
  }

  # If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
  # Connection header that may have been passed to this server
  map $http_upgrade $proxy_connection {
    default upgrade;
    '' close;
  }


  # Client

  # Sets the maximum allowed size of the client request body, specified in the 
  # "Content-Length" request header field. If the size in a request exceeds the 
  # configured value, the 413 (Request Entity Too Large) error is returned to 
  # the client. Please be aware that browsers cannot correctly display this error. 
  # Setting size to 0 disables checking of client request body size.
  client_max_body_size 0;
  

  # Proxy

  # HTTP 1.1 support
  proxy_http_version 1.1;

  # When proxying to another server, the speed of two different connections will affect 
  # the client's experience: the connection from the client to nginx, and the connection 
  # from nginx to the backend server. Nginx has the ability to adjust its behavior based 
  # on whichever one of these connections you wish to optimize. Without buffers, data is 
  # sent from the proxied server and immediately begins to be transmitted to the client. 
  # If the clients are assumed to be fast, buffering can be turned off in order to get 
  # the data to the client as soon as possible. With buffers, the Nginx proxy will 
  # temporarily store the backend's response and then feed this data to the client. If 
  # the client is slow, this allows the Nginx server to close the connection to the backend 
  # sooner. It can then handle distributing the data to the client at whatever pace is possible.
  # When disabling buffering, Nginx will still use buffers if the upstream is faster than 
  # the client, but it will immediately try to flush data to the client instead of waiting 
  # for the buffer to pool. If the client is slow, this can cause the upstream connection 
  # to remain open until the client can catch up. When buffering is "off" only the buffer 
  # defined by the proxy_buffer_size directive will be used. By default, the buffer size is 
  # equal to the size of one buffer set by the proxy_buffers directive, which by default
  # is equal to one memory page. This is either 4K or 8K, depending on platform.
  proxy_buffering off;

  # The "Host" header is of particular importance in most proxying scenarios. By default, 
  # this will be set to the value of $proxy_host, a variable that will contain the domain 
  # name or IP address and port taken directly from the proxy_pass definition. This is 
  # selected by default as it is the only address Nginx can be sure the upstream server 
  # responds to (as it is pulled directly from the connection info).
  # In most cases, you will want to set the "Host" header to the $host variable. It is the 
  # most flexible and will usually provide the proxied servers with a "Host" header filled 
  # in as accurately as possible. This variable is equal to line Host in the header of the
  # request or name of the server processing the request if the Host header is not available.
  # This variable may have a different value from $http_host in such cases: 1) when the Host 
  # input header is absent or has an empty value, $host equals to the value of server_name 
  # directive; 2)when the value of Host contains port number, $host doesn't include that port 
  # number. $host's value is always lowercase.
  proxy_set_header Host $http_host;

  # HTTP/1.1 introduced support for the Upgrade header field. In the exchange, the client 
  # begins by making a clear-text request, which is later upgraded to a newer http protocol.
  # The Upgrade header is utilized by websockets.
  proxy_set_header Upgrade $http_upgrade;

  # See the Vairables section for the definition of $proxy_connection.
  proxy_set_header Connection $proxy_connection;

  # The X-Real-IP is set to the IP address of the client so that the proxy can correctly 
  # make decisions or log based on this information
  proxy_set_header X-Real-IP $remote_addr;

  # The X-Forwarded-For header is a list containing the IP addresses of every server the 
  # client has been proxied through up to this point. The $proxy_add_x_forwarded_for variable 
  # takes the value of the original X-Forwarded-For header retrieved from the client and adds 
  # the Nginx server's IP address to the end.
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

  # The X-Forwarded-Proto header gives the proxied server information about the schema of 
  # the original client request (whether it was an http or an https request). See the
  # Variables section for the definition of $proxy_x_forwarded_proto.
  proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;


  # Servers

  include conf.d/*;
}
